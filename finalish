                                                                                                                

#include <stdio.h>
#include <time.h>
#include "E101.h"
int main(){
        init();

                // gate closed
                char ip [15] = "130.195.6.196";
                int port = 1024;
                connect_to_server(ip, port); // connects to the gate server

                char message [24] = "Please";
                send_to_server(message); // requests password


                //char message [24]; // init variable to store password
                receive_from_server(message);
                send_to_server(message); // sends password to server
                // gate opens

                printf("Gate opened \n");

                //set_motor(1,60);
                //sleep1(1,0);

                //printf("Hi Emma  \n");

                //int row  = 1;
                //double weight = -160;
                //double  total = 0;  //biggest possible total 12880 or -12880

                int picCount = 0;
                //take_picture();

                bool quad2 = false;
                bool quad3 = false;
                bool quad4 = false;

                //int warning = 0;

                //display_picture(5,0);
                while (picCount < 3000)
                {
                        set_motor(1, 42);  //left motor
                        set_motor(2, 42); //right motor 

                        int row = 1;
                        double weight = -160;
                        double total = 0;
                        double numWhite = 0;

                        //sleep1(1,0);
                        take_picture();
                        while (row<320)
                        {
                                int red = get_pixel(120, row, 0); //row is 240 down, column is 320 sideways
                                int green = get_pixel(120, row, 1);
                                int blue = get_pixel(120, row, 2);

                                int white = get_pixel(120, row, 3);

                                //printf("Pixel Number %d: ", row);

                                if(white>100)
                                {
                                        //printf("White \t");
                                        total = total+weight;
                                        numWhite = numWhite +1;
                                }
                                if((red>100) && (green<80) && (blue<80))
                                {
                                        printf("FUCK");
                                        row = 321; //if you see red stop the while loops
                                        picCount = 3001;
                                        set_motor(2,0);
                                         sleep1(0,100000);
                                        numWhite = 150; //set other variables to a medium
                                        total =0;
                                }

                                //else
                                //{
                                        //printf("Black \t");
                                //}

                                //printf("Red:  %d, \t", red);
                                //printf("Green:  %d, \t", green);
                                //printf("Blue:  %d \n", blue);

                                row++;
                                //weight++;
                                weight = weight + 1;
                        }

                        //printf("Total: %f \n", total);
                        //printf("White pixel: %f \n", numWhite);

                        if(numWhite>290) //if there is an intersection turn left
                        {
                                if (quad3)
                                {
                                //set_motor(1,0);
                                        //set_motor(2,0);
                                        //sleep1(0,100000);
                                        //set_motor(1,-40);
                                        //set_motor(2, 40);
                                        //sleep1(1,0);
                                        printf("Intersection\n");
                                        //set_motor(1,0);
                                        set_motor(1,0);
                                        sleep1(0,200000);
                                }
                                else
                                {
                                        printf("First time\n");
                                        sleep1(2,0); //walk past first intersection
                                        quad3 = true; //quad 3 starts now 
                                }

                        }

                        else if(numWhite<1) //if nothing keep turning left until you see something  (for q3)
                        {
                                printf("All Black\n");
                                //above is for q2
                                set_motor(1,0);
                                set_motor(2,0);
                                 sleep1(1,0);
                                set_motor(1,-42);
                                set_motor(2,42);
                                sleep1(1,350000);
                                set_motor(1,0);
                                set_motor(2,0);
                                sleep1(1,0);

                                
                                //set_motor(2,-42);
                                //sleep1(0,100000);

                        }

                        else
                        {
                                if (total<-1800)
                                {
                                        set_motor(1,0);
                                        sleep1(0,100000);
                                }
                                else if (total>1800)
                                {
                                        set_motor(2,0);
                                        sleep1(0,100000);
                                }
}

                        //else if (total>=-1000) && (total<=1000))

                        //sleep1(0,100000);
                        picCount++;


                }
                set_motor(1,0);
                set_motor(2,0);

                sleep1(1,0);

                printf("Next quad \n");

        int maxValue = 0;
        int i = 0;
        int front_reading[2000];
        int right_reading[2000];
        int left_reading[2000];
        
                
        set_motor(1,42);
        set_motor(2,42);
        sleep1(0,700000);

 for (i=0; i<2000; i++)
        {
                set_motor(1,42);
                set_motor(2,42);

                front_reading[i] = read_analog(1);
                right_reading[i] = read_analog(0);
                left_reading[i] = read_analog(7);

                printf("Front: %d\t", front_reading[i]);
                printf("Right: %d\t", right_reading[i]);
                printf("Left: %d\n", left_reading[i]);

                //if(right_reading[i]>655)
                //{
                //        set_motor(1,0);
                //        sleep1(0,150000);
                //}
                //else if(left_reading[i]>655)
                //{
                //        set_motor(2,0);
                //        sleep1(0,150000);
                //}
                if(left_reading[i]<300) //if there is heaps of space on left sensor rely on right sensor
                {

{
                        if(right_reading[i]>600)
                        {
                                set_motor(1,0);
                                sleep1(0,100000);
                        }
                        else
                        {
                                set_motor(2,0);
                                sleep1(0,100000);
                        }

                }
                else if(left_reading[i]<300) //if there is heaps of space on right sensor rely on left sensor

                {
                        if(left_reading[i]<600)
                        {
                                set_motor(1,0);
                                sleep1(0,100000);
                        }
                        else
                        {
                                set_motor(2,0);
                                sleep1(0,100000);
                        }
                }
 else
                {
                        if(right_reading[i]>left_reading[i]) //if everything is alg stabalise itself
                        {
                                set_motor(1,0);
                                sleep1(0,100000);
                        }
                        else
                        {
                                set_motor(2,0);
                                sleep1(0,100000);
                        }
                }
                
                if(front_reading[i]>380)
                {
                        set_motor(1,-42);
                        set_motor(2,42);
                        sleep1(0, 250000);
                }


        }

                        //sleep1(1,0);
                set_motor(1,0);

       set_motor(2,0);
                return 0;
        }

